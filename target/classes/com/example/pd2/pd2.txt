EJERCICIO 1.1
Existen varias secuencias de incremento conocidas, entre ellas:

Intervalo Tokuda
Formula: ceiling( (9 * (9/4)^n – 4) / 5).
Secuencia: 1, 4, 9, 20, 46, 103, 233

Intervalo de Hibbard
Formula: 2k-1
Secuencia: 1, 3, 7, 15, 31

Intervalo de Papernov & Stasevich:
Formula: 2k+1
Secuencia: 1, 3, 5, 9, 17, 33, 65

Información extraída de:
https://www.mycplus.com/featured-articles/shell-sort-algorithm/

EJERCICIO 1.2
Todos los algoritmos son de O(1), ya que son operaciones y asignaciones

EJERCICIO 1.3
TOKUDA {9,4,1}
1a	 2b	  3c	  4d	   5a     6b   7c    8d    9a    10b   11c   12d  intervalo
256 - 458 - 655 - 298 - 043 - 648 - 778 - 621 - 655 - 019 - 124 - 847	  inicial
019 - 124 - 655 - 298 - 043 - 648 - 778 - 621 - 655 - 256 - 458 - 847		9
019 - 124 - 458 - 298 - 043 - 256 - 655 - 621 - 655 - 648 - 778 - 847		4
019 - 043 - 124 - 256 - 298 - 458 - 621 - 648 - 655 - 655 - 778 - 847		1

HIBBARD {7,3,1}
1a	 2b	  3c	  4a	   5b    6c    7a    8b    9c    10a   11b   12c intervalo
256 - 458 - 655 - 298 - 043 - 648 - 778 - 621 - 655 - 019 - 124 - 847	  inicial
256 - 458 - 019 - 124 - 043 - 648 - 778 - 621 - 655 - 655 - 298 - 847		7
124 - 043 - 019 - 256 - 298 - 648 - 655 - 458 - 655 - 778 - 621 - 847		3
019 - 043 - 124 - 256 - 298 - 458 - 621 - 648 - 655 - 655 - 778 - 847		1

PAPERNOV & STASEVICH {9,5,3,1}
1a	 2b	  3c	  4a	   5b    6c    7a    8b    9c    10a   11b   12c intervalo
256 - 458 - 655 - 298 - 043 - 648 - 778 - 621 - 655 - 019 - 124 - 847	  inicial
019 - 124 - 655 - 298 - 043 - 648 - 778 - 621 - 655 - 256 - 458 - 847		9
019 - 124 - 621 - 298 - 043 - 458 - 778 - 655 - 655 - 256 - 648 - 847		5
019 - 043 - 458 - 256 - 124 - 621 - 298 - 648 - 655 - 778 - 655 - 847		3
019 - 043 - 124 - 256 - 298 - 458 - 621 - 648 - 655 - 655 - 778 - 847		1

EJERCICIO 2.1
				iteración
44 - 55 - 12 - 42 - 94 - 18 - 6 – 67	0
6 | 44 - 55 - 12 - 42 - 94 - 18 – 67	1
6 - 12 | 44 - 55 - 18 - 42 - 94 – 67	2
6 - 12 - 18 | 44 - 55 - 42 - 67 – 94	3
6 - 12 - 18 - 42 | 44 - 55 - 67 – 94	4
6 - 12 - 18 - 42 - 44 | 55 - 67 – 94	5 -->queda ordenado el conjunto
6 - 12 - 18 - 42 - 44 - 55 | 67 – 94	6
6 - 12 - 18 - 42 - 44 - 55 - 67 | 94	7

EJERCICIO 2.2

BURBUJA CON BOOLEANO
LN: este algoritmo agrega una condición a la burbuja, para que si el conjunto
ya está ordenado, deje de ejecutarse. Esto lo hará con una variable booleano, y
cada vez que se hacen los intercambios, se mantiene registro de si se hizo o no.
PRECONDICIONES:
-el conjunto de datos es comparable
POSTCONDICIONES:
-el conjunto de datos queda ordenado

PSEUDO
burbujaBooleano(N : vector)
COM
DESDE i = 1 HASTA N-1 HACER
	ordenado <-- verdadero
 	DESDE j = N HASTA i +1 HACER
 		SI V[j].clave < V[j-1].clave ENTONCES
			intercambia (V[j], V[j-1])
			ordenado <-- falso
		FINSI
 	FINDESDE
	SI ordenado == verdadero ENTONCES
		break
	FINSI
FINDESDE
FIN

El orden del tiempo de ejecución en el peor caso es, al igual que en el burbuja original,
O(n^2), pero tendrá un mejor caso de O(n), cuando el conjunto ya está ordenado.


BURBUJA CON CONTADOR
LN: este algoritmo agrega una condición a la burbuja, para que si el conjunto
ya está ordenado, deje de ejecutarse. Esto lo hará con una variable contador, cada vez
que se hace un intercambio, se incrementa, después de cada iteración chequea si
hubo incremento respecto a la pasada o no (es decir, si hubo un intercambio).
PRECONDICIONES:
-el conjunto de datos es comparable
POSTCONDICIONES:
-el conjunto de datos queda ordenado

PSEUDO
burbujaContador(N : vector)
COM
contador <-- 0
DESDE i = 1 HASTA N-1 HACER
	aux <-- contador
 	DESDE j = N HASTA i +1 HACER
 		SI V[j].clave < V[j-1].clave ENTONCES
			intercambia (V[j], V[j-1])
			contador <-- contador + 1
		FINSI
 	FINDESDE
	SI contador == aux ENTONCES
		break
	FINSI
FINDESDE
FIN

El orden del tiempo de ejecución en el peor caso es, al igual que en el burbuja original,
O(n^2), pero tendrá un mejor caso de O(n), cuando el conjunto ya está ordenado.


EJERCICIO 2.3
CON BOOLEANO
							iteración	ordenado
44 - 55 - 12 - 42 - 94 - 18 - 6 – 67	0		verdadero
6 | 44 - 55 - 12 - 42 - 94 - 18 – 67	1		falso
6 - 12 | 44 - 55 - 18 - 42 - 94 – 67	2		falso
6 - 12 - 18 | 44 - 55 - 42 - 67 – 94	3		falso
6 - 12 - 18 - 42 | 44 - 55 - 67 – 94	4 		falso
6 - 12 - 18 - 42 | 44 - 55 - 67 – 94	5 		verdadero --> corta en la iteración 5


CON CONTADOR
							iteración	aux	contador
44 - 55 - 12 - 42 - 94 - 18 - 6 – 67	0		0	0
6 | 44 - 55 - 12 - 42 - 94 - 18 – 67	1		0	6
6 - 12 | 44 - 55 - 18 - 42 - 94 – 67	2		6	10
6 - 12 - 18 | 44 - 55 - 42 - 67 – 94	3		10	13
6 - 12 - 18 - 42 | 44 - 55 - 67 – 94	4 		13	15
6 - 12 - 18 - 42 - 44 | 55 - 67 – 94	5		15	15 --> corta en la iteración 5

EJERCICIO 2.4
El algoritmo de cocktail es muy parecido al burbuja, la diferencia que tien
es que en el mismo paso coloca el menor en la punta izquierda, y el mayor en la
punta derecha, sigue siendo O(n^2), pero tiene ciertas eficiencias ya que dentro
del mismo bucle principal, ordena el mayor y el menor por iteración.
							iteración
44 - 55 - 12 - 42 - 94 - 18 - 6 – 67	0
6 | 44 - 55 - 12 - 42 - 94 - 18 – 67	1
6 | 44 - 12 - 42 - 55 - 18 - 67 | 94	1
6 - 12 | 44 - 18 - 42 - 55 - 67 | 94	2
6 - 12 | 18 - 42 - 44 - 55 | 67 - 94	2
6 - 12 - 18 | 42 - 44 - 55 | 67 - 94	3
6 - 12 - 18 | 42 - 44 | 55 - 67 - 94	3
6 - 12 - 18 - 42 - 44 - 55 - 67 - 94	4 --> queda ordenado el conjunto

